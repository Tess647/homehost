// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  username          String             @unique
  password          String
  name              String?
  avatar            String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Favorites/watchlists relations
  favoriteMovies    FavoriteMovie[]
  favoriteTVShows   FavoriteTVShow[]
  favoriteEpisodes  FavoriteEpisode[]
  favoriteAlbums    FavoriteAlbum[]
  favoriteSongs     FavoriteSong[]
  
  // Ratings relations
  movieRatings      MovieRating[]
  tvShowRatings     TVShowRating[]
  episodeRatings    EpisodeRating[]
  albumRatings      AlbumRating[]
  songRatings       SongRating[]
  
  // Watch progress relation
  watchProgress     WatchProgress[]
}

model FavoriteMovie {
  id        Int      @id @default(autoincrement())
  userId    Int
  movieId   Int
  addedAt   DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  
  @@unique([userId, movieId])
}

model FavoriteTVShow {
  id        Int      @id @default(autoincrement())
  userId    Int
  tvShowId  Int
  addedAt   DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tvShow    TVShow   @relation(fields: [tvShowId], references: [id], onDelete: Cascade)
  
  @@unique([userId, tvShowId])
}

model FavoriteEpisode {
  id        Int      @id @default(autoincrement())
  userId    Int
  episodeId Int
  addedAt   DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  episode   Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, episodeId])
}

model FavoriteAlbum {
  id        Int      @id @default(autoincrement())
  userId    Int
  albumId   Int
  addedAt   DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  
  @@unique([userId, albumId])
}

model FavoriteSong {
  id        Int      @id @default(autoincrement())
  userId    Int
  songId    Int
  addedAt   DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  
  @@unique([userId, songId])
}

model MovieRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  movieId   Int
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  
  @@unique([userId, movieId])
}

model TVShowRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  tvShowId  Int
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tvShow    TVShow   @relation(fields: [tvShowId], references: [id], onDelete: Cascade)
  
  @@unique([userId, tvShowId])
}

model EpisodeRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  episodeId Int
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  episode   Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, episodeId])
}

model AlbumRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  albumId   Int
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  
  @@unique([userId, albumId])
}

model SongRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  songId    Int
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  
  @@unique([userId, songId])
}

model WatchProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  movieId   Int?
  episodeId Int?
  position  Float    // Position in seconds
  duration  Float    // Total duration in seconds
  completed Boolean  @default(false)
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie?   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, movieId])
  @@unique([userId, episodeId])
}

model NotAvailable {
	id      				Int      	@id @default(autoincrement())
	fs_path					String		@unique
	type					String
}

model Movie {
  id      				Int      	@id @default(autoincrement())
  type					String
  tmdb_id				Int			@unique
  fs_path				String   	@unique
  url_path				String		@unique
  ctime					DateTime
  mtime					DateTime
  adult    				Boolean
  backdrop_path			String
  budget				Int
  genres				Genre[]
  imdb_id				String
  overview				String
  popularity			Float
  poster_path			String
  production_companies	ProductionCompany[]
  release_date			String
  revenue				BigInt
  runtime				Int
  tagline				String?
  title					String
  vote_average			Float
  vote_count			Int
  logo_path				String?
  credits				Credit[]
  similar				Similar[]
  
  // User-related relations
  favoriteByUsers       FavoriteMovie[]
  userRatings           MovieRating[]
  watchProgress         WatchProgress[]
}

model Genre {
	id				Int			@id @default(autoincrement())
	tmdb_id			Int			@unique
	name			String	
	movies			Movie[]
	tv_shows		TVShow[]
}

model ProductionCompany {
	id				Int		@id @default(autoincrement())
	tmdb_id			Int		@unique
	logo_path		String?
	name			String
	origin_country	String	
	movies			Movie[]
	tv_shows		TVShow[]
}

model Credit {
	id						Int			@id @default(autoincrement())
	movie_tmdb_id			Int?		
	tv_show_tmdb_id			Int?		
	movie					Movie? 		@relation(fields: [movie_tmdb_id], references: [tmdb_id])
	tv_show					TVShow? 	@relation(fields: [tv_show_tmdb_id], references: [tmdb_id])
	tmdb_id					Int			
	adult					Boolean?
	gender					Int
	known_for_department	String?
	name					String
	popularity				Float?
	profile_path			String?
	character				String?
	credit_id				String		@unique
	order					Int?
	department				String?
	job						String?
}

model Similar {
	id				Int			@id @default(autoincrement())		
	movies			Movie[]
	tv_shows		TVShow[]
	tmdb_id			Int			@unique
	title			String?
	name			String?
	release_date	String?
	first_air_date	String?
	overview		String
	backdrop_path	String?
	poster_path		String?
}

model TVShow {
  id      				Int      				@id @default(autoincrement())
  type					String
  tmdb_id				Int						@unique
  backdrop_path			String
  genres				Genre[]
  name					String
  overview				String
  popularity			Float
  poster_path			String
  production_companies	ProductionCompany[]
  seasons				Season[]
  tagline				String?
  vote_average			Float
  vote_count			Int
  logo_path				String?
  credits				Credit[]				
  similar				Similar[]
  imdb_id				String
  
  // User-related relations
  favoriteByUsers       FavoriteTVShow[]
  userRatings           TVShowRating[]
}

model Season {
	id      		Int      	@id @default(autoincrement())
	tv_show_tmdb_id	Int
	tv_show			TVShow 		@relation(fields: [tv_show_tmdb_id], references: [tmdb_id], onDelete: Cascade)
	tmdb_id			Int			@unique
	air_date		String
	name			String
	overview		String
	poster_path		String
	season_number	Int
	episodes 		Episode[]
	@@unique([tv_show_tmdb_id, season_number])
}

model Episode {
	id      				Int      	@id @default(autoincrement())
	type					String
	season_tmdb_id  		Int
	season    				Season    	@relation(fields: [season_tmdb_id], references: [tmdb_id], onDelete: Cascade)
	tmdb_id					Int			@unique
	fs_path					String   	@unique
  	url_path				String		@unique
  	ctime					DateTime
  	mtime					DateTime
	air_date				String
	episode_number			Int
	name					String
	overview				String
	season_number			Int
	still_path				String
	vote_average			Float
	vote_count				Int
  
  // User-related relations
  favoriteByUsers          FavoriteEpisode[]
  userRatings              EpisodeRating[]
  watchProgress            WatchProgress[]
}

model Album {
	id      				Int		@id @default(autoincrement())
	type					String
	spotify_id				String	@unique
	album_type				String
	artists					Artist[]
	image_url				String
	label					String
	name					String
	popularity				Int?
	release_date			String
	songs					Song[]
	total_tracks			Int
  
  // User-related relations
  favoriteByUsers          FavoriteAlbum[]
  userRatings              AlbumRating[]
}

model Artist {
	id      				Int		@id @default(autoincrement())
	type					String
	spotify_id				String	@unique
	name					String
	image_url				String
	popularity				Int?
	albums    				Album[]
	songs					Song[]
}

model Song {
	id      				Int      	@id @default(autoincrement())
	album_spotify_id  		String
	album    				Album    	@relation(fields: [album_spotify_id], references: [spotify_id], onDelete: Cascade)
	artists					Artist[]
	spotify_id				String		@unique
	fs_path					String   	@unique
	url_path				String		@unique
	ctime					DateTime
	mtime					DateTime
	disc_number				Int
	duration_ms				Int
	explicit				Boolean
	name					String
	preview_url				String?
	track_number			Int
  
  // User-related relations
  favoriteByUsers          FavoriteSong[]
  userRatings              SongRating[]
}